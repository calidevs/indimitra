"""initial migration

Revision ID: 86f0a7a10437
Revises:
Create Date: 2025-04-04 01:47:35.951298

"""

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = "86f0a7a10437"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "categories",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("createdAt", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_categories_id"), "categories", ["id"], unique=False)
    op.create_table(
        "payment",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("type", sa.Enum("CASH", name="paymenttype"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_payment_id"), "payment", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("mobile", sa.String(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column(
            "type",
            sa.Enum("ADMIN", "USER", "DELIVERY", "STORE_MANAGER", name="usertype"),
            nullable=False,
        ),
        sa.Column("referredBy", sa.Integer(), nullable=True),
        sa.Column("referralId", sa.String(), nullable=False),
        sa.Column("cognitoId", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["referredBy"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("mobile"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "address",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("userId", sa.Integer(), nullable=False),
        sa.Column("isPrimary", sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(
            ["userId"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_address_id"), "address", ["id"], unique=False)
    op.create_table(
        "products",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=True),
        sa.Column("categoryId", sa.Integer(), nullable=False),
        sa.Column("image", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["categoryId"],
            ["categories.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_products_id"), "products", ["id"], unique=False)
    op.create_table(
        "store",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("radius", sa.Float(), nullable=True),
        sa.Column("managerUserId", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["managerUserId"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_store_id"), "store", ["id"], unique=False)
    op.create_table(
        "inventory",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("storeId", sa.Integer(), nullable=False),
        sa.Column("productId", sa.Integer(), nullable=False),
        sa.Column("price", sa.Float(), nullable=True),
        sa.Column("measurement", sa.Integer(), nullable=True),
        sa.Column("unit", sa.String(), nullable=True),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.Column("updatedAt", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["productId"],
            ["products.id"],
        ),
        sa.ForeignKeyConstraint(
            ["storeId"],
            ["store.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_inventory_id"), "inventory", ["id"], unique=False)
    op.create_table(
        "orders",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("createdByUserId", sa.Integer(), nullable=False),
        sa.Column("addressId", sa.Integer(), nullable=False),
        sa.Column("storeId", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "ORDER_PLACED",
                "ACCEPTED",
                "CANCELLED",
                "READY_FOR_DELIVERY",
                "SCHEDULED",
                "PICKED_UP",
                "DELIVERED",
                name="orderstatus",
            ),
            nullable=False,
        ),
        sa.Column("paymentId", sa.Integer(), nullable=True),
        sa.Column("totalAmount", sa.Float(), nullable=False),
        sa.Column("deliveryDate", sa.DateTime(), nullable=True),
        sa.Column("deliveryInstructions", sa.String(), nullable=True),
        sa.Column("cancelMessage", sa.String(), nullable=True),
        sa.Column("cancelledByUserId", sa.Integer(), nullable=True),
        sa.Column("cancelledAt", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["addressId"],
            ["address.id"],
        ),
        sa.ForeignKeyConstraint(
            ["cancelledByUserId"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["createdByUserId"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["paymentId"],
            ["payment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["storeId"],
            ["store.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_orders_id"), "orders", ["id"], unique=False)
    op.create_table(
        "store_driver",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("userId", sa.Integer(), nullable=False),
        sa.Column("storeId", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["storeId"],
            ["store.id"],
        ),
        sa.ForeignKeyConstraint(
            ["userId"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("userId", "storeId", name="unique_store_driver"),
    )
    op.create_index(op.f("ix_store_driver_id"), "store_driver", ["id"], unique=False)
    op.create_table(
        "delivery",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("orderId", sa.Integer(), nullable=False),
        sa.Column("driverId", sa.Integer(), nullable=True),
        sa.Column("pickedUpTime", sa.DateTime(), nullable=True),
        sa.Column("deliveredTime", sa.DateTime(), nullable=True),
        sa.Column("photo", sa.String(), nullable=True),
        sa.Column("comments", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(
            ["driverId"],
            ["users.id"],
        ),
        sa.ForeignKeyConstraint(
            ["orderId"],
            ["orders.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_delivery_id"), "delivery", ["id"], unique=False)
    op.create_table(
        "order_items",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("productId", sa.Integer(), nullable=False),
        sa.Column("inventoryId", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("orderId", sa.Integer(), nullable=False),
        sa.Column("orderAmount", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["inventoryId"],
            ["inventory.id"],
        ),
        sa.ForeignKeyConstraint(
            ["orderId"],
            ["orders.id"],
        ),
        sa.ForeignKeyConstraint(
            ["productId"],
            ["products.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_order_items_id"), "order_items", ["id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_order_items_id"), table_name="order_items")
    op.drop_table("order_items")
    op.drop_index(op.f("ix_delivery_id"), table_name="delivery")
    op.drop_table("delivery")
    op.drop_index(op.f("ix_store_driver_id"), table_name="store_driver")
    op.drop_table("store_driver")
    op.drop_index(op.f("ix_orders_id"), table_name="orders")
    op.drop_table("orders")
    op.drop_index(op.f("ix_inventory_id"), table_name="inventory")
    op.drop_table("inventory")
    op.drop_index(op.f("ix_store_id"), table_name="store")
    op.drop_table("store")
    op.drop_index(op.f("ix_products_id"), table_name="products")
    op.drop_table("products")
    op.drop_index(op.f("ix_address_id"), table_name="address")
    op.drop_table("address")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_payment_id"), table_name="payment")
    op.drop_table("payment")
    op.drop_index(op.f("ix_categories_id"), table_name="categories")
    op.drop_table("categories")
    # ### end Alembic commands ###

    # drop enums (manually added)
    op.execute("DROP TYPE IF EXISTS paymenttype")
    op.execute("DROP TYPE IF EXISTS usertype")
    op.execute("DROP TYPE IF EXISTS orderstatus")
